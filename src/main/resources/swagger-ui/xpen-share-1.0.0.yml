openapi: 3.0.1
info:
  title: xpen-share
  version: 1.0.0
tags:
- name: Groups
  description: Operations related to groups
- name: Users
  description: Operations related to users
- name: Expenses
  description: Operations related to expenses
- name: Settlements
  description: Operations related to settlements
paths:
  /api/expenses:
    post:
      tags:
      - Expenses
      summary: Create a new expense
      description: Creates an expense and returns the created expense object.
      operationId: createExpense
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateExpenseRequest"
        required: true
      responses:
        "201":
          description: Expense successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseDto"
  /api/groups:
    post:
      tags:
      - Groups
      summary: Create a new Group
      description: Creates an Group and returns the created Group object.
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupRequest"
        required: true
      responses:
        "201":
          description: Group successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDto"
  /api/groups/{groupId}:
    get:
      tags:
      - Groups
      summary: Get an Existing Group
      description: Get an Existing Group using group's ID
      operationId: getGroup
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Group is found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDto"
  /api/groups/{groupId}/balances:
    get:
      tags:
      - Groups
      operationId: getGroupBalances
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getGroupBalances 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/groups/{groupId}/members:
    post:
      tags:
      - Groups
      summary: Add Members to an Existing Group
      description: Add Members to and Existing Group using Group's ID
      operationId: addMembers
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMembersRequest"
        required: true
      responses:
        "201":
          description: Members are successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddMembersRequest"
  /api/groups/{groupId}/settlements:
    get:
      tags:
      - Groups
      operationId: getGroupSettlements
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: status
        in: query
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/SettlementStatus"
      - name: fromUserId
        in: query
        explode: false
        schema:
          type: integer
          format: int64
          nullable: true
      - name: toUserId
        in: query
        explode: false
        schema:
          type: integer
          format: int64
          nullable: true
      - name: page
        in: query
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
          default: 0
      - name: size
        in: query
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
          default: 20
      responses:
        "200":
          description: getGroupSettlements 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/settlements:
    post:
      tags:
      - Settlements
      summary: Create a new Settlement
      description: Creates an Settlement and returns the created Settlement object.
      operationId: createSettlement
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSettlementRequest"
        required: true
      responses:
        "201":
          description: Settlement successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettlementDto"
  /api/settlements/{settlementId}/cancel:
    post:
      tags:
      - Settlements
      operationId: cancelSettlement
      parameters:
      - name: settlementId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: cancelSettlement 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/settlements/{settlementId}/confirm:
    post:
      tags:
      - Settlements
      operationId: confirmSettlement
      parameters:
      - name: settlementId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: confirmSettlement 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/users:
    post:
      tags:
      - Users
      summary: Create a new User
      description: Creates an User and returns the created User object.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
        required: true
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
  /api/users/{userId}:
    get:
      tags:
      - Users
      summary: Get an Existing User
      description: Get an Existing User using user's ID
      operationId: getUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: User is found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
components:
  schemas:
    AddMembersRequest:
      required:
      - membersAdded
      type: object
      properties:
        groupId:
          type: integer
          format: int64
        membersAdded:
          type: array
          items:
            type: integer
            format: int64
        totalMember:
          type: integer
          format: int32
    AddressDto:
      required:
      - line1
      type: object
      properties:
        line1:
          minLength: 1
          type: string
        line2:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
    CreateExpenseRequest:
      required:
      - amount
      - description
      - groupId
      - paidBy
      - splitType
      type: object
      properties:
        groupId:
          type: integer
          format: int64
        paidBy:
          type: integer
          format: int64
        amount:
          minimum: 0
          exclusiveMinimum: true
          type: number
        description:
          minLength: 1
          type: string
        splitType:
          $ref: "#/components/schemas/ExpenseSplitType"
        split:
          type: array
          items:
            $ref: "#/components/schemas/ShareDto"
    CreateGroupRequest:
      required:
      - members
      - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
        members:
          type: array
          items:
            type: integer
            format: int64
    CreateSettlementRequest:
      required:
      - amount
      - fromUserId
      - groupId
      - toUserId
      type: object
      properties:
        groupId:
          type: integer
          format: int64
        fromUserId:
          type: integer
          format: int64
        toUserId:
          type: integer
          format: int64
        amount:
          minimum: 0
          exclusiveMinimum: true
          type: number
        method:
          $ref: "#/components/schemas/SettlementMethod"
        note:
          type: string
        reference:
          type: string
        enforceOwedLimit:
          type: boolean
    CreateUserRequest:
      required:
      - email
      - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
        email:
          minLength: 1
          type: string
          format: email
        mobileNumber:
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
          nullable: true
        address:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/AddressDto"
    ExpenseDto:
      required:
      - amount
      - description
      - expenseId
      - groupId
      - paidBy
      type: object
      properties:
        expenseId:
          type: integer
          format: int64
        groupId:
          type: integer
          format: int64
        paidBy:
          type: integer
          format: int64
        amount:
          minimum: 0
          exclusiveMinimum: true
          type: number
        description:
          minLength: 1
          type: string
        split:
          type: array
          items:
            $ref: "#/components/schemas/ShareDto"
        createdAt:
          type: string
          format: date-time
    ExpenseSplitType:
      type: string
      enum:
      - EQUAL
      - EXACT
      - PERCENT
    GroupDto:
      required:
      - members
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        members:
          type: array
          items:
            type: integer
            format: int64
        createdAt:
          type: string
          format: date-time
    SettlementDto:
      required:
      - amount
      - fromUserId
      - groupId
      - toUserId
      type: object
      properties:
        settlementId:
          type: integer
          format: int64
        groupId:
          type: integer
          format: int64
        fromUserId:
          type: integer
          format: int64
        toUserId:
          type: integer
          format: int64
        amount:
          type: number
        method:
          $ref: "#/components/schemas/SettlementMethod"
        note:
          type: string
        status:
          $ref: "#/components/schemas/SettlementStatus"
        createdAt:
          type: string
          format: date-time
    SettlementMethod:
      type: string
      enum:
      - CASH
      - BANK_TRANSFER
      - WALLET
      - OTHER
    SettlementStatus:
      type: string
      enum:
      - PENDING
      - CONFIRMED
      - CANCELED
    ShareDto:
      required:
      - amount
      - userId
      type: object
      properties:
        userId:
          type: integer
          format: int64
        amount:
          minimum: 0
          exclusiveMinimum: true
          type: number
    UserDto:
      required:
      - email
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
          format: email
        mobileNumber:
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
        address:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/AddressDto"
        createdAt:
          type: string
          format: date-time
